plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id "org.sonarqube" version "3.3"
}

group = 'meetween'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.10
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.10
			}
			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.dto.*',
			]
		}
	}
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'*.*Application',
							'**/*Exception*',
							'**/dto/**',
							'**/global/config/**',
							'**/BaseEntity*',
							'**/GlobalExceptionHandler*'
					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://3.35.220.195:9000'
		property 'sonar.login', 'sqa_70c5c9136a5ed4575943d0ff368f20f2dfeb3c83'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.projectVersion', '1.1.0-SNAPSHOT'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', '${buildDir}/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.java.binaries', '${buildDir}/classes'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.exclusions', '**/test/**, **/resources/**'
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'

	// jet
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
