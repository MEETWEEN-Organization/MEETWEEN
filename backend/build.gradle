plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id 'org.sonarqube' version '5.0.0.4638'
}

group = 'meetween'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'

	// rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	// jet
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

/**
 * jacoco
 */
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0
			}
			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.dto.*',
			]
		}
	}
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'*.*Application',
							'**/*Exception*',
							'**/dto/**',
							'**/global/config/**',
							'**/BaseEntity*',
							'**/GlobalExceptionHandler*'
					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

/**
 * sonarqube
 */
sonarqube {
	properties {
		property 'sonar.projectKey', 'MEETWEEN'
		property "sonar.profile", "MEETWEEN"
		property 'sonar.host.url', System.getenv('SONARQUBE_URL')
		property 'sonar.login', System.getenv('SONARQUBE_TOKEN')
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.projectVersion', '1.1.0-SNAPSHOT'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', project.layout.buildDirectory.dir("reports/jacoco/test/jacocoTestReport.xml").get().asFile.path
		property 'sonar.java.binaries', project.layout.buildDirectory.dir("classes").get().asFile.path
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.coverage.exclusions', '**/test/**/*, **/*Application*, **/global/config/**, **/dto/**, **/*Exception*, **/BaseEntity*, **/GlobalExceptionHandler*'
		property 'sonar.exclusions', '**/test/**, **/resources/**, **/jacoco/**'
	}
}

/**
 * asciidoctor
 */

//println "snippetsDir: $snippetsDir"
//
//tasks.named('asciidoctor') {
//	configurations 'asciidoctorExt'
//	baseDirFollowsSourceFile()
//	inputs.dir snippetsDir
//	dependsOn test
//}
//
//asciidoctor.doFirst {
//	delete file('src/main/resources/static/docs')
//}
//
//task copyDocument(type: Copy) {
//	dependsOn asciidoctor
//	from file("build/docs/asciidoc")
//	into file("src/main/resources/static/docs")
//}
//
//build {
//	dependsOn copyDocument
//}